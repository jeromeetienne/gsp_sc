from enum import Enum
from typing import Union, overload

import numpy

class BufferType(Enum):
    float32 = 0
    uint32 = 1
    color = 1
    uint8 = 2
    int32 = 3
    int8 = 4
    vec2 = 5
    vec3 = 6
    vec4 = 7
    # others

class Constants:
    """Common constants like colors."""

    red = numpy.uint32(0xFF0000FF)
    green = numpy.uint32(0x00FF00FF)
    blue = numpy.uint32(0x0000FFFF)

class Buffer:
    """typed array with single dimension"""

    def __init__(self, count: int, buffer_type: BufferType) -> None: ...
    def get_data(self, offset: int, length: int) -> bytes: ...
    def set_data(self, data: bytes, offset: int) -> None: ...
    def get_count(self) -> int: ...
    def get_type(self) -> BufferType: ...
    @overload
    def fill(self, value: numpy.uint32) -> "Buffer": ...
    @overload
    def fill(self, value: numpy.uint8) -> "Buffer": ...
    def fill(self, value: Union[numpy.uint32, numpy.uint8]) -> "Buffer": ...
    @staticmethod
    def from_numpy(ndarray: numpy.ndarray) -> "Buffer": ...
    def __getitem__(self, key) -> BufferType: ...
    def __setitem__(self, key, value: BufferType) -> None: ...

class Mat4x4:
    """4x4 Matrix. Handle Model, View, Projection matrices."""

    def __init__(self, data: list[list[float]] | None = None) -> None: ...
    """4x4 Matrix. if data is None, initializes to identity matrix."""
    def get_data(self) -> list[list[float]]: ...
    def set_data(self, data: list[list[float]]) -> None: ...
    @staticmethod
    def from_numpy(ndarray: numpy.ndarray) -> "Mat4x4": ...

class DataSource:
    def __init__(self, uri: str) -> None: ...
    def to_buffer(self, buffer_type: BufferType = BufferType.uint8) -> Buffer: ...

# =============================================================================
# Transform
# =============================================================================
class Transform:
    """Chain of transformations to apply to data."""

    ...

# =============================================================================
#
# =============================================================================

Groups = int | list[int] | list[list[int]]
"""A type that can represent group IDs in various forms."""

TransBuf = Union[Transform, Buffer]
"""A type that can be either a Transform or a Buffer."""

# =============================================================================
# Texture
# =============================================================================
class Texture:
    def __init__(self, data: TransBuf, ndim: int) -> None: ...

class Texture2D(Texture):
    def __init__(self, data: TransBuf) -> None: ...

class Texture3D(Texture):
    def __init__(self, data: TransBuf) -> None: ...

# =============================================================================
#
# =============================================================================
class Canvas:
    def __init__(self, width: int, height: int, dpi: float) -> None: ...
    def set_dpi(self, dpi: float) -> None: ...
    def set_size(self, width: int, height: int) -> None: ...
    def get_dpi(self) -> float: ...
    def get_size(self) -> tuple[int, int]: ...
    def add(self, viewport: "Viewport") -> None: ...
    def remove(self, viewport: "Viewport") -> None: ...

class Viewport:
    def __init__(self, width: int, height: int) -> None: ...
    def set_size(self, width: int, height: int) -> None: ...
    def get_size(self) -> tuple[int, int]: ...
    def add(self, visual: "Visual") -> None: ...
    def remove(self, visual: "Visual") -> None: ...

# =============================================================================
#
# =============================================================================

class Visual:
    """Base class for visual elements like Pixels, Images, etc."""

    def __init__(self, model_matrix: Mat4x4) -> None: ...
    def get_model_matrix(self) -> Mat4x4: ...
    def set_model_matrix(self, matrix: Mat4x4) -> None: ...

class Pixels(Visual):
    def __init__(self, positions: TransBuf, colors: TransBuf, groups: TransBuf) -> None: ...
    def set_positions(self, x: int, y: int, color: tuple[int, int, int]) -> None: ...
    def get_positions(self) -> list[tuple[int, int, tuple[int, int, int]]]: ...

class Images(Visual):
    def __init__(self, positions: TransBuf, sizes: TransBuf, axis: TransBuf, angles: TransBuf, textures: list[Texture], groups: TransBuf) -> None: ...

# =============================================================================
# Renderer
# =============================================================================

class Camera:
    def __init__(self, view_matrix: Mat4x4, projection_matrix: Mat4x4) -> None: ...

class MatplotlibRenderer:
    def __init__(self, canvas: Canvas) -> None: ...
    def render(self, visuals: list[Visual], cameras: list[Camera]) -> None: ...
